unit GeTUsuariosById.Controller;

interface

uses
  Horse, GeTUsuariosById.UseCase;

type
  iGeTUsuariosByIdController = interface
    ['{2410d452-49b7-4d55-b781-b2e8b740839a}']
    procedure handle(Req: THorseRequest; Res: THorseResponse; Next: TProc);
  end;

  TGeTUsuariosByIdController = class(TInterfacedObject, iGeTUsuariosByIdController)
  private
    FGeTUsuariosByIdUseCase: iGeTUsuariosByIdUseCase;
  public
    constructor Create(Value: iGeTUsuariosByIdUseCase);
    procedure handle(Req: THorseRequest; Res: THorseResponse; Next: TProc);
  end;

implementation

uses
  Service.Utils, Usuario.Entity, System.JSON, REST.Json;

{ TGeTUsuariosByIdController }

constructor TGeTUsuariosByIdController.Create(Value: iGeTUsuariosByIdUseCase);
begin
  FGeTUsuariosByIdUseCase := Value;
end;

procedure TGeTUsuariosByIdController.handle(Req: THorseRequest;
  Res: THorseResponse; Next: TProc);
var
  produto: TUsuarios;
  id: String;
begin
  id := Req.Params.Items['id'];
  produto := FGeTUsuariosByIdUseCase.execute(id);
  Res.Send<TJSONObject>(TJson.ObjectToJsonObject(produto)).Status(200);
  produto.Free;
end;

end.
