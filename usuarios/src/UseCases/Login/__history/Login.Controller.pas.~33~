unit Login.Controller;

interface

uses
  Horse, Login.UseCase, REST.Json, System.SysUtils, Usuario.Entity, System.Json,
  Auth.Token, System.DateUtils;

type

  TLoginController = class
  private
    FLoginUseCase: TLoginUseCase;
  protected
    { protected declarations }
  public
    constructor Create(Value: TLoginUseCase);
    procedure handle(Req: THorseRequest; Res: THorseResponse; Next: TProc);

  end;

implementation

uses
  Service.Utils, System.Generics.Collections;

{ TGetAllLoginController }

constructor TLoginController.Create(Value: TLoginUseCase);
begin
  FLoginUseCase := Value;
end;

procedure TLoginController.handle(Req: THorseRequest; Res: THorseResponse;
  Next: TProc);
var
  Token: TJSONObject;
  Usuario: TUsuarios;
  email, senha, body: string;
begin
  email := TUtils.PegarValor(Req.body, 'email');
  senha := TUtils.PegarValor(Req.body, 'senha');

  try
    Usuario := FLoginUseCase.execute(email, senha);
  except
    on e: exception do
    begin
      Usuario.Free;
      Res.Send(e.Message).Status(400);
      exit;
    end;
  end;

  Token := TJSONObject.Create.AddPair('refreshToken',
    TAuthToken.gerarToken('userToken', Usuario.user_token));

  Token := TJSONObject.Create.AddPair('accessToken',
    TAuthToken.gerarToken('userToken', Usuario.user_token, IncHour(Now, 1)));

  Usuario.Validate();

  try
    Res.Send(Token.ToJSON).Status(200)
      .ContentType('application/json;charset=UTF-8')
  finally
    Token.Free;
    Usuario.Free;
  end;
end;

end.
