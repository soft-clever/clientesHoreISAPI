unit GetAllUsuarios.Controller;

interface

uses
  Horse, GetAllUsuarios.UseCase, REST.Json, System.SysUtils;

type

  TGetAllUsuariosController = class
  private
    FListAllUsuariosUseCase: TGetAllUsuariosUseCase;
  protected
    { protected declarations }
  public
    constructor Create(Value: TGetAllUsuariosUseCase);
    procedure handle(Req: THorseRequest; Res: THorseResponse; Next: TProc);

  end;

implementation

uses
  Service.Utils, System.Generics.Collections, Usuario.Entity;

{ TGetAllUsuariosController }

constructor TGetAllUsuariosController.Create(Value: TGetAllUsuariosUseCase);
begin
  FListAllUsuariosUseCase := Value;
end;

procedure TGetAllUsuariosController.handle(Req: THorseRequest;
  Res: THorseResponse; Next: TProc);
var
  util: TUtils;
  usuarios: TObjectList<TUsuario>;
  limit, page: Integer;
begin
  limit := Req.Query.Field('limit').AsInteger;
  page := Req.Query.Field('page').AsInteger;
  usuarios := FListAllUsuariosUseCase.execute(limit, page);
  util := TUtils.Create;

  Res.Send(BoolToStr(Req.Headers.ContainsKey('Authorization'))).Status(200);
  // Res.Send<TJSonArray>(util.ObjectListToJsonArray<TUsuario>(usuarios));
  usuarios.Free;
end;

end.
