unit GetAllUsuarios.Controller;

interface

uses Horse, GetAllUsuarios.UseCase, REST.Json, System.SysUtils;

type
  iGetAllUsuariosController = interface
    ['{6c65ddf1-90f6-4af2-9030-fd32b1300419}']
    procedure handle(Req: THorseRequest; Res: THorseResponse; Next: TNextProc);
  end;

  TGetAllUsuariosController = class(TInterfacedObject,
    iGetAllUsuariosController)
  private
    FListAllUsuariosUseCase: TGetAllUsuariosUseCase;
  public
    constructor Create(Value: TGetAllUsuariosUseCase);
    procedure handle(Req: THorseRequest; Res: THorseResponse; Next: TNextProc);
  end;

implementation

uses
  Service.Utils, System.Generics.Collections, Usuario.Entity;

{ TGetAllUsuariosController }

constructor TGetAllUsuariosController.Create(Value: TGetAllUsuariosUseCase);
begin
  FListAllUsuariosUseCase := Value;
end;

procedure TGetAllUsuariosController.handle(Req: THorseRequest;
  Res: THorseResponse; Next: TProc);
var
  usuarios: TObjectList<TUsuarios>;
  limit, page: Integer;
begin
  limit := Req.Query.Field('limit').AsInteger;
  page := Req.Query.Field('page').AsInteger;
  usuarios := FListAllUsuariosUseCase.execute(limit, page);

  Res.Send(usuarios.ToString);
  usuarios.Free;
end;

end.
